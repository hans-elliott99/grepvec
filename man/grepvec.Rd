% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grepvectors.R
\name{grepvec}
\alias{grepvec}
\title{Search a vector of strings for matches in a vector of patterns.}
\usage{
grepvec(
  haystacks,
  needles,
  matchrule = c("all", "first", "last"),
  fixed = FALSE
)
}
\arguments{
\item{haystacks}{A character vector of strings which will be searched over
for sub-string / regex matches.}

\item{needles}{A character vector of expressions which will be searched for
in haystacks as sub-strings or regexs, depending on the \code{fixed} argument.}

\item{matchrule}{Character, default "all". If "first", the first match found
in needles is returned for each string in haystack. This may improve
performance for large needle vectors since the search process for each
string can stop as soon as a match is found.
If "last", the search process will continue until every sub-string in
needles has been tested, and the last found match will be returned.
If "all", a vector is returned containing the indices of all found matches
in \code{needles}.}

\item{fixed}{Logical, default FALSE. If TRUE, treat each string in needles as
an exact sub-string to find. If FALSE, needles are treated as regular
expressions.}
}
\value{
A list, length(haystacks), of integer vectors, each vector containing
the indices of succesfully matched needle strings (or 0 if no match is
found).
}
\description{
\code{grepvec} searches each string in haystacks for every pattern in needles. By
default, the strings in the needles vector are compiled as regular
expressions. A list of length(haystacks) is returned, containing at each
index an integer vector of the indices in needles which successfully
matched. This can be adjusted via the matchrule argument.
}
\examples{
grepvec(c("some string 1", "another string"),
        c("some", "other", "string"), fixed = TRUE)
grepvec(c("hello", "jelly"), c("^h", ".ell.", "ello$"))
grepvec(c("Some text which might possibly contain one of many keywords"),
        c("one", "possib", "many"))
}

---
title: "grepvec demo"
format: 
  gfm:
    toc: true
---

`r Sys.time()`  

Notes:
- test and translate diff encodings  
- refactored a bit  
- encoding message left on  



```{r}
# compiled on:
Sys.info()[c("sysname", "release", "version", "machine")]
```


```{r}
# make sure you installed in some way
library(grepvec)
library(microbenchmark)
set.seed(1614)

#
# create some data
#
txt <- tryCatch(
    readLines("../inst/extdata/shakespeare.txt"),
    warning = \(e) readLines("./inst/extdata/shakespeare.txt")
)
# rm document info
txt <- txt[min(which(txt == "1609")) : max(which(txt == "THE END"))]
# so we have pure Shakespeare
writeLines(c(head(txt, 15), "....", tail(txt, 5)))

#
# get some random words from the txt to use as patterns
#
gen_word_list <- function(lines, n = 10) {
    li <- as.integer(runif(n, 1, length(lines)))
    words <- paste(lines[li], collapse = " ")
    words <- unique(strsplit(words, " ")[[1]])
    words <- words[words != ""]
    words <- words[as.integer(runif(n, 1, length(words)))]
    words <- gsub("\\[|\\]|\\(|\\)", "", words)
    return(words)
}

```


## Examples


```{r}
grep("gr(a|e)y", c("grey", "gray"))
grepvec("gr(a|e)y", c("grey", "gray"))

grepvec(c("^a", "\\d"), c("1", "apple"))
lapply(c("^a", "\\d"), \(p) grep(p, c("1", "apple")))

grepvec(c("one", "possib", "many"),
        c("Some text which might possibly contain one of many keywords",
          "Another string without many words",
          "A third impossibly boring string",
          "Done"))

grepvec(letters[1:4], c("AbC", 123), ignore_case = TRUE, value = TRUE)

grepvec("^regex$", "regex")

grepvec("^fixed$", "fixed", fixed = TRUE)

```


```{r}
words <- gen_word_list(txt, n = 2000)

t0 = Sys.time()
m <- grepvec(words, txt[1:500], match = "all")
difftime(Sys.time(), t0)

# base R version
t0 = Sys.time()
m2 <- lapply(words, grepl, x = txt[1:500])
difftime(Sys.time(), t0)

microbenchmark(
    grepvec(words, txt[1:500]),
    lapply(words, grepl, x = txt[1:500]),
    times = 10
)

```

Be careful when unlisting the results, because if no match was found a 0 length vector is returned.

```{r}
res <- grepvec(words[1:100], tail(txt, 500), match = "first", value = TRUE)
head(res)

length(res)
length(unlist(res))

# helper function for flattening a list of vectors with length 0 or 1
flatten <- function(x, keepdim = TRUE) {
    if (keepdim) {
        x <- lapply(x, \(vec) if (length(vec) == 0) NA else vec[1L])
    }
    return(unlist(x))
}

length(flatten(res))

```


```{r}
pat <- gen_word_list(txt, 2000) # your vector of patterns
d <- data.frame(txt_col = txt[1001:2000], match = FALSE)

# example - get rows that match any pattern
d[unique(unlist(grepvec(pat, d$txt_col, match = "first"))), "match"] <- TRUE
head(subset(d, match == TRUE))
head(subset(d, match == FALSE))

# example - create columns based on matches
keywords <- gen_word_list(d$txt_col, 3)
cat("searching for patterns:", paste0(keywords, collapse = ", "), "\n")

d[, keywords] <- 0
(ixs <- unlist(grepvec(keywords, d$txt_col, match = "first")))

for (i in seq_along(keywords))
    d[ixs[i], keywords[i]] <- 1
## see some results
d[c(1:2, unlist(ixs)), ]

# example - getting the last match is as quick and easy as getting the first
grepvec(pat[1:2], txt, match = "first")
grepvec(pat[1:2], rev(txt), match = "first")

# example - keep dimensions to convert to a data.frame
x <- do.call(cbind.data.frame,
             grepvec(letters, txt, keepdim = TRUE, names = TRUE))
## number of occurrences in all of shakespeare
nocc <- apply(x, MARGIN = 2, FUN = \(y) sum(!is.na(y)))
sort(nocc, decreasing = TRUE)

# capital letters?
x <- do.call(cbind.data.frame,
             grepvec(LETTERS, txt, keepdim = TRUE, names = TRUE))
## number of occurrences in all of shakespeare
nocc <- apply(x, MARGIN = 2, FUN = \(y) sum(!is.na(y)))
sort(nocc, decreasing = TRUE)

# example - if you are a data.table user, functions as.data.table and setDT make
# it easy to convert a list of equal length vectors into a table 
if (require("data.table", quietly = TRUE))
    head(data.table::setDT(grepvec(c("a", "z"), txt,
                                    keepdim = TRUE, names = TRUE, value = TRUE)))
```


Invalid regex patterns:  

```{r}
# what if we use an invalid regex pattern?
grepvec(c("[bad", "(regex"), "those are bad regex patterns")

# grep is similair but throws a warning and errors out
tryCatch(
    grep("[bad", "those are bad regex patterns"),
    error = \(e) { cat("grep error message:\n"); conditionMessage(e) }
)
```


## Speed

```{r big-hay-vec}
# test grepvec on some bigger vectors
hay <- c(txt, txt)
ndl <- words
cat("N Hay =", format(length(hay), big.mark = ","),
    "| N Needle =", format(length(ndl), big.mark = ","), "\n")

t0 <- Sys.time()
suppressWarnings({
    x <- grepvec(ndl, hay, fixed = FALSE, match = "all")
})
difftime(Sys.time(), t0)

#
# returning only the first match is much faster
#
t0 <- Sys.time()
suppressWarnings({
    x <- grepvec(ndl, hay, fixed = FALSE, match = "first")
})
difftime(Sys.time(), t0)

#
# fixed searches are much much faster
# since regex compilation/execution adds a lot of time
#
t0 <- Sys.time()
suppressWarnings({
    x <- grepvec(ndl, hay, fixed = TRUE, match = "all")
})
difftime(Sys.time(), t0)


t0 <- Sys.time()
suppressWarnings({
    x <- grepvec(ndl, hay, fixed = TRUE, match = "first")
})
difftime(Sys.time(), t0)

```



## Compare grepvec with native R solutions

Suggestions wanted.

```{r base-r-cmp}
loop_grep <- function(needles, haystacks) {
    x <- vector(mode = "list", length = length(haystacks))
    for (i in seq_along(needles)) {
        x[[i]] <- grep(needles[i], haystacks)
    }
    x
}

lapply_grep <- function(needles, haystacks) {
    lapply(needles, grep, x = haystacks)
}

lapply_grep_lambda <- function(needles, haystacks) {
    lapply(needles, \(p) grep(p, haystacks))
}

# verify same results
shortndls <- words[1:100] 
shorttxt <- txt[1:10000]
x_loop <- loop_grep(shortndls, shorttxt)
x_lapply <- lapply_grep(shortndls, shorttxt)
x_grepvec <- grepvec(shortndls, shorttxt)
all(unlist(x_loop) == unlist(x_lapply))

# grepvec returns empty vec if no results, others return NULL. make equal
# x_grepvec <- lapply(x_grepvec, \(vec) if (length(vec) == 0) NULL else vec)
all(unlist(x_lapply) == unlist(x_grepvec))

microbenchmark(loop_grep(shortndls, shorttxt),
               lapply_grep_lambda(shortndls, shorttxt),
               lapply_grep(shortndls, shorttxt),
               grepvec(shortndls, shorttxt),
               times = 10)
```



Some comparisons with `base::grep`:  

`grep` is typically faster when searching for a single pattern in a single string, which makes sense considering `grepvec` has some extra overhead. The difference in performance is variable and depends on the regular expression.    

`grepvec` may become slightly faster when comparing a pattern with a bunch of strings (see the last example), but this can vary quite a bit based on the regular expression.  

`grepvec` will be most useful when searching for a vector of patterns in a vector of strings. As demonstrated above, native R solutions aren't quite as fast.  


```{r}
microbenchmark(
    grep("^[[:alnum:]._-]+@[[:alnum:].-]+$", "some-email@grep.com"),
    grepvec("^[[:alnum:]._-]+@[[:alnum:].-]+$", "some-email@grep.com")
)

microbenchmark(
    grep("([^ @]+)@([^ @]+)", "name@server.com"),
    grepvec("([^ @]+)@([^ @]+)", "name@server.com")
)

microbenchmark(
    grep("([0-9][0-9]?)/([0-9][0-9]?)/([0-9][0-9]([0-9][0-9])?)", c("01/01/1996", "2001-01-1")),
    grepvec("([0-9][0-9]?)/([0-9][0-9]?)/([0-9][0-9]([0-9][0-9])?)", c("01/01/1996", "2001-01-1"))
)

p <- gen_word_list(txt, n = 1)
microbenchmark(
    grep(p, txt),
    grepvec(p, txt)
)
cat("regex:", p, "\n")

```



## Encodings


R supports many differenct character encodings. When you load text data into R, R has no way to know for certain what encoding scheme the bytes in its memory correspond to.  
Grepvec takes care to behave similairly to grep in dealing with character encodings. If the encoding of a string has been set (e.g., via `iconv`, `Encoding`, or something else), grepvec can treat the string appropriately.

In the example below,  `pat = "première"` has encoding UTF8 (because that's the default in my locale) but the string stored in `lat1` has a Latin-1 encoding. If the encoding of `lat1` is not identified before it is passed to grepvec or grep, these functions will error because they cannot determine how the characters should be treated.  
Fundamentally, although the UTF8-encode "première" and the Latin-1 version appear identical on our screens, different sequences of bytes are used to represent the strings.


```{r encodings}
Sys.getlocale("LC_CTYPE")

# load some text with a latin-1 encoding
lat1 <- readLines("https://raw.githubusercontent.com/stain/encoding-test-files/master/latin1.txt",
                n = 1)
pat <- "première"
try(grepvec(pat, lat1))
try(grep(pat, lat1))

# cat(paste("Text:", lat1, "\nEncoding:", Encoding(lat1), "\n"))
Encoding(lat1) <- "latin1"
cat(paste("Text:", lat1, "\nSet Encoding:", Encoding(lat1), "\n"))

pat <- "première"
cat("Pattern:", pat, "\nEncoding:", Encoding(pat), "\n")
grepvec(pat, lat1)
grep(pat, lat1)

grep(pat, lat1, useBytes = TRUE)
grepvec(pat, lat1, use_bytes = TRUE)

```


```{r}
Encoding(pat)
Encoding(lat1)
grepvec(pat, iconv(lat1, to = "UTF-8"))

grepvec(iconv(pat, to = "latin1"), lat1)

grepvec(iconv(pat, to = "UTF-8"), iconv(lat1, to = "UTF-8"), fixed = TRUE)
grepvec(iconv(pat, to = "UTF-8"), iconv(lat1, to = "UTF-8"), fixed = FALSE)

grep("premi.re", lat1)
grepvec("premi.re", lat1)

# if the character encodings don't match but the characters are equal the regex
# should still work...

# these strings are encoded differently, and thus their bytes do not match
pat <- iconv("prem.ère", to = "latin1")
x <- "première"
# accented e (ie, "e with grave") is a single byte in latin1, 2 bytes in utf8
charToRaw(pat)
charToRaw(x) 

grep(pat, x)
grepvec(pat, x)

grep(pat, iconv(x, to = "latin1"))
grepvec(pat, iconv(x, to = "latin1"))

```


```{r}
(p <- rawToChar(as.raw(200)))
Encoding(p) <- "latin1"
p

grep(p, lat1, ignore.case = TRUE)
grepvec(p, lat1, ignore_case = TRUE)
grepvec(p, toupper(lat1), fixed = TRUE)

(ex <- readLines("https://raw.githubusercontent.com/stain/encoding-test-files/master/koi8_r.txt")[3])
grep("Cyr", ex)
grepvec("Cyr", ex)
grep(ex, ex)
grepvec(ex, "c")

(ex <- readLines("https://raw.githubusercontent.com/stain/encoding-test-files/master/utf8.txt"))
Encoding(ex) <- "UTF-8"

grep("K", ex)
grepvec("K", ex)

charToRaw("K")
charToRaw("К")

grep("Кириллица", ex)
grepvec("Кириллица", ex)

```



TODO: what if text encoding is very strange, will it get handled? try to break things...